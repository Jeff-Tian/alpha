# This workflow will do a clean installation of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 */12 * * *'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: alpha
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: false
      matrix:
        node-version: [ 15.4.0 ]
        os: [ ubuntu-latest ]

    steps:
      - name: Checkout Git Source
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: c-hive/gha-yarn-cache@v1

      - name: Install Dependencies
        run: yarn

      - name: Continuous Integration
        run: yarn ci

      - name: Code Coverage
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: yarn build
        run: yarn build

  build-docker-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - run: echo "${{secrets.DOCKER_PASSWORD}}" | docker login -u "${{secrets.DOCKER_USERNAME}}" --password-stdin
      - run: git_hash=$(git rev-parse ${{ github.sha }})
      - run: sh .github/dockerize.sh ${{ github.sha }}

  deploy-okteto:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - uses: actions/checkout@v3

      - run: curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      - run: chmod +x ./kubectl
      - run: sudo mv ./kubectl /usr/local/bin/kubectl
      - run: mkdir ${HOME}/.kube
      - run: npm i -g k8ss
      - run: echo -e "machine github.com\n  login ${{secrets.GH_TOKEN}}" > ~/.netrc
      - run: git clone https://github.com/Jeff-Tian/k8s-config.git ${HOME}/k8s-config
      - run: k8ss switch --cluster=okteto --namespace=jeff-tian
      - run: kubectl apply -k k8s
      - run: kubectl set image deployment alpha alpha=jefftian/alpha:${{ github.sha }}
#
#      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
#        with:
#          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
#          heroku_app_name: 'uniheart'
#          heroku_email: 'jeff.tian@outlook.com'
